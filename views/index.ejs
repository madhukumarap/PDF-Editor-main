<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PDF Editor</title>
    <link rel="stylesheet" href="/css/style.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 20px;
        background-color: #f5f5f5;
      }
      .container {
        max-width: 800px;
        margin: 0 auto;
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }
      .button {
        padding: 10px 20px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin: 5px;
      }
      .button:hover {
        background-color: #45a049;
      }
      #editor {
        margin-top: 20px;
        padding: 20px;
        border: 1px solid #ddd;
        min-height: 400px;
      }
      .pdf-content {
        margin: 20px 0;
      }
      input[type="text"] {
        padding: 5px;
        margin: 2px;
        border: 1px solid #ddd;
        border-radius: 3px;
      }
      input[type="text"]:hover {
        background-color: #f0f0f0;
      }
      #loading-indicator {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        padding: 20px;
        background: rgba(0,0,0,0.7);
        color: white;
        border-radius: 5px;
        z-index: 9999;
      }
      .loading {
        display: none;
        margin: 10px 0;
        text-align: center;
        color: #666;
      }
      .loading.active {
        display: block;
      }
      .upload-section {
        margin-bottom: 20px;
        text-align: center;
      }
      .btn-primary {
        background-color: #007bff;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin: 5px;
      }
      .btn-primary:hover {
        background-color: #0056b3;
      }
      #imagePreview {
        max-width: 200px;
        margin: 10px auto;
        display: none;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <header>
        <h1>PDF Editor</h1>
        <p>Upload, Edit, and Export PDFs with preserved formatting</p>
      </header>

      <main>
        <div class="upload-section">
          <!-- Logo upload section -->
          <input type="file" id="logoInput" accept="image/*" style="display: none;" onchange="uploadLogo()" />
          <button class="btn-primary" onclick="document.getElementById('logoInput').click()">Upload Logo</button>
          <img id="imagePreview" src="" alt="Logo Preview" />
          
          <!-- PDF upload section -->
          <form action="/upload" method="post" enctype="multipart/form-data" class="file-upload">
            <label for="pdfFile" class="custom-file-upload">
              <i class="fas fa-cloud-upload-alt"></i>
              Choose PDF File
            </label>
            <input type="file" id="pdfFile" name="pdfFile" accept="application/pdf" required>
            <div class="file-name"></div>
            <button type="submit" class="btn-primary">
              <i class="fas fa-upload"></i>
              Upload PDF
            </button>
          </form>
        </div>

        <div class="features">
          <div class="feature">
            <i class="fas fa-image feature-icon"></i>
            <h3>Image Preservation</h3>
            <p>Maintains all images in their original quality and position</p>
          </div>
          <div class="feature">
            <i class="fas fa-table feature-icon"></i>
            <h3>Table Support</h3>
            <p>Preserves table structures and formatting</p>
          </div>
          <div class="feature">
            <i class="fas fa-font feature-icon"></i>
            <h3>Text Formatting</h3>
            <p>Keeps original fonts, styles, and layouts</p>
          </div>
        </div>

        <!-- Editor Area -->
        <div id="pdfContent" class="pdf-content">
          <% if (typeof content !== 'undefined') { %>
            <%- content %>
          <% } %>
        </div>

        <!-- Export Button -->
        <button id="exportBtn" class="btn-primary" onclick="exportPDF()">Export PDF</button>

        <div id="loading" class="loading">Generating PDF...</div>
      </main>
    </div>

    <script>
      document.getElementById('pdfFile').addEventListener('change', function(e) {
        const fileName = e.target.files[0]?.name || 'No file chosen';
        document.querySelector('.file-name').textContent = fileName;
      });

      async function exportPDF() {
        try {
          // Show loading indicator
          const loading = document.getElementById('loading');
          loading.classList.add('active');

          // Collect form data
          const formData = {
            formDate: document.getElementById('formDate').value,
            studentName: document.getElementById('studentName').value,
            usn: document.getElementById('usn').value,
            degree: document.getElementById('degree').value,
            department: document.getElementById('department').value,
            semester: document.getElementById('semester').value,
            courseTitle: document.getElementById('courseTitle').value,
            courseCode: document.getElementById('courseCode').value,
            courseDept: document.getElementById('courseDept').value,
            courseTerm: document.getElementById('courseTerm').value,
            credits: document.getElementById('credits').value,
            totalCredits: document.getElementById('totalCredits').textContent
          };

          console.log('Sending form data:', formData);

          // Send request to server
          const response = await fetch('/export', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ formData })
          });

          if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Export failed: ${errorText}`);
          }

          // Get the PDF blob from the response
          const blob = await response.blob();
          
          // Create a URL for the blob
          const url = window.URL.createObjectURL(blob);
          
          // Create a temporary link and trigger download
          const a = document.createElement('a');
          a.href = url;
          a.download = 'course-registration.pdf';
          document.body.appendChild(a);
          a.click();
          
          // Clean up
          window.URL.revokeObjectURL(url);
          document.body.removeChild(a);
          
          console.log('PDF exported successfully');
        } catch (error) {
          console.error('Error exporting PDF:', error);
          alert('Failed to export PDF: ' + error.message);
        } finally {
          // Hide loading indicator
          loading.classList.remove('active');
        }
      }

      // Update total credits when credits field changes
      document.addEventListener('DOMContentLoaded', function() {
        const creditsInput = document.getElementById('credits');
        if (creditsInput) {
          creditsInput.addEventListener('input', function() {
            const totalCredits = document.getElementById('totalCredits');
            if (totalCredits) {
              totalCredits.textContent = this.value;
            }
          });
        }
      });

      async function uploadLogo() {
        const fileInput = document.getElementById('logoInput');
        const preview = document.getElementById('imagePreview');
        const file = fileInput.files[0];
        
        if (!file) return;

        // Show preview
        const reader = new FileReader();
        reader.onload = function(e) {
          preview.src = e.target.result;
          preview.style.display = 'block';
        }
        reader.readAsDataURL(file);

        // Upload file
        const formData = new FormData();
        formData.append('logo', file);

        try {
          const response = await fetch('/upload-image', {
            method: 'POST',
            body: formData
          });

          const result = await response.json();
          if (result.success) {
            alert('Logo uploaded successfully!');
          } else {
            alert('Error uploading logo: ' + result.error);
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error uploading logo');
        }
      }
    </script>
  </body>
</html>
